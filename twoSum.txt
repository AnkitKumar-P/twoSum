// import HashMap
import java.util.HashMap;
class Solution {
    public int[] twoSum(int[] nums, int target) {
//             return array
            int rtn [] = new int [2];
//             length of given array
            int n = nums.length;
//             initilize HashMap
            HashMap <Integer,Integer> h = new HashMap <>();
            
//             code
            for(int i = 0;i<n;i++){
                    if(!h.containsKey(target - nums[i])){
                            h.put(nums[i],i);
                    }
                    else{
                            rtn [0]  = i;
                            rtn [1]  = h.get(target - nums[i]);
                    }
            }
        return rtn;
    }
}




// Time Complexity  : O(n)  : because we have to transverse whole array in worse case;
//  Space complexity : O(n) : Because we use HashMap of size n
// Logic  : create hashmap
// if target - nums[i] not in hashMap the put it in hashMap
// else return the indexes of target - nums[i]  and nums[i]